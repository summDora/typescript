"use strict";
//  类 Class ：定义了一件事物的抽象特点，包含它的属性和方法
//  对象 Object ：类的实例，通过 new 生成
//  面向对象 OOP ：三大特性 => 继承 封装 多态
//  封装 Encapsulation ：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据
//  继承 Inheritance ：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性
//  多态 Polymorphism ：继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 Cat 和 Dog 都继承自 Animal，但是分别实现了自己的 eat 方法
//  存取器 Getter & Setter ：用以改变属性的读取和赋值行为
//  修饰符 Modifiers ：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法
//  抽象类 Abstact Class ：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现
//  接口 Interfaces ：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口
